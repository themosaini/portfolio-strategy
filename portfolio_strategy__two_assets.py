# -*- coding: utf-8 -*-
"""portfolio_strategy _two_assets.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LoLtQN0zGyP-B9znswPUYEACV-zMyFV1
"""

import pandas as pd
import numpy as np
import yfinance as yf
import matplotlib.pyplot as plt

# Downloading Apple and Coca-Cola data from Yahoo Finance
assets = ['AAPL', 'KO']

start_date = '2014-01-01'
end_date = '2024-04-07'
portfolio_data = yf.download(assets, start=start_date, end=end_date)['Adj Close']

# Calculate daily returns for each asset
daily_returns = portfolio_data.pct_change()

# Define portfolio weights (e.g Apple 50% and Coca-Cola 50%)
weights = [0.5, 0.5]

# Calculate portfolio returns
portfolio_returns = daily_returns.dot(weights)

# Calculate cumulative returns for each asset
cumulative_returns = (1+ daily_returns).cumprod() - 1

# Calculate Sharpe ratio (assuming risk-free rate of 0%)
sharpe_ratio = (portfolio_returns.mean() / portfolio_returns.std()) * np.sqrt(252)

print(sharpe_ratio)

# Visualize both daily returns and cumulative returns
plt.figure(figsize = (12, 12))

# Plot daily returns
plt.subplot(2,1,2)
daily_returns.plot(ax=plt.gca())
plt.title('Daily Portfolio Returns')
plt.xlabel('Date')
plt.ylabel('Daily Return')
plt.grid(True)

# Plot cumulative returns for each asset with different colors
plt.subplot(2,1,2)

for asset in cumulative_returns.columns:
  cumulative_returns[asset].plot(label=asset)

plt.title('Cumulative Portfolio Returns')
plt.xlabel('Date')
plt.ylabel('Cumulative Return')
plt.legend()
plt.grid(True)

plt.tight_layout()
plt.show()

# Print Portfolio Metrics
print('Portfolio Performance Metrics:')
print(f'Sharpe Ratio: {sharpe_ratio:.2f}')
print(f'Average Daily Return: {portfolio_returns.mean():.4f}')
print(f'Average Annualised Return: {portfolio_returns.mean() * 252:.2f}')
print(f'Volatility (Standard Deviation of Daily Returns): {portfolio_returns.std():.4f}')

"""# **Investment strategies using the portfolio of two assets**"""

# Let us now visualise the portfolio of two assets, that is, ‘AAPL and KO’ using different strategies namely

# Downloading stock data from Yahoo Finance
def download_stock_data(tickers,start_date,end_date):
  data = yf.download(tickers, start=start_date, end=end_date)['Adj Close']
  return data

# Equal weighted portfolio
def equal_weighted_portfolio(data):
  num_assets = len(data.columns)
  weights = np.ones(num_assets) / num_assets
  equal_weighted_returns = data.pct_change().dot(weights)
  return equal_weighted_returns

# Market Cap Weighted Portfolio
def market_cap_weighted_portfolio(data):
   market_caps = data.iloc[-1]  # Using latest market capitalisation
   weights = market_caps / market_caps.sum()
   market_cap_returns = data.pct_change().dot(weights)
   return market_cap_returns

# Minimum Variance Portfolio
def minimum_variance_portfolio(data):
   cov_matrix = data.pct_change().cov()
   inv_cov_matrix = np.linalg.inv(cov_matrix)
   ones_vector = np.ones(len(data.columns))
   weights = inv_cov_matrix.dot(ones_vector) / ones_vector.dot(inv_cov_matrix).dot(ones_vector)
   minimum_var_returns = data.pct_change().dot(weights)
   return minimum_var_returns

# Download stock data
data = download_stock_data(assets, start_date, end_date)

# Calculate portfolio returns using different strategies
equal_weighted_returns = equal_weighted_portfolio(data)
market_cap_weighted_returns = market_cap_weighted_portfolio(data)
minimum_variance_returns = minimum_variance_portfolio(data)

# Visualise portfolio returns on separate graphs
plt.figure(figsize=(12, 12))

# Equal Weighted Portfolio
plt.subplot(3, 1, 1)
equal_weighted_returns.plot(label='Equal Weighted Portfolio')
plt.title('Equal Weighted Portfolio Returns')
plt.xlabel('Date')
plt.ylabel('Portfolio Return')
plt.legend()
plt.grid(True)

# Market Cap Weighted Portfolio
plt.subplot(3, 1, 2)
market_cap_weighted_returns.plot(label='Market Cap Weighted Portfolio')
plt.title('Market Cap Weighted Portfolio Returns')
plt.xlabel('Date')
plt.ylabel('Portfolio Return')
plt.legend()
plt.grid(True)

# Minimum Variance Portfolio
plt.subplot(3, 1, 3)
minimum_variance_returns.plot(label='Minimum Variance Portfolio')
plt.title('Minimum Variance Portfolio Returns')
plt.xlabel('Date')
plt.ylabel('Portfolio Return')
plt.legend()
plt.grid(True)

plt.tight_layout()
plt.show()



